{"metadata":{"title":"Deploy the blog to Github Pages","date":"Apr 4, 2021","excerpt":"Fun fact: Github Pages is free!"},"content":"<p>After the first post, we already have a blog that runs on the local machine. Now, let's deploy it to Github Pages!</p>\n<h2>Change to static adapter</h2>\n<p>Adapters in SvelteKit are small plugins for building apps on specific platform. The default adapter of a SvelteKit app is <code>adapter-node</code>, which runs the app with a simple Node server. To host the app to Github Pages, we need to convert the app to static files with <code>adapter-static</code>.</p>\n<pre><code class=\"hljs language-bash\">npm i -D @sveltejs/adapter-static\n</code></pre>\n<p>And change the adapter part of <code>svelte.config.cjs</code> to:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">//adapter: node(),</span>\n<span class=\"hljs-attr\">adapter</span>: <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'@sveltejs/adapter-static'</span>)(),\n</code></pre>\n<p>By the time on this post, there is some error with the default installed <code>@sveltejs/adapter-static</code>, you may encounter error like:</p>\n<pre><code class=\"hljs language-scala\">config.kit.adapter should be an <span class=\"hljs-class\"><span class=\"hljs-keyword\">object</span> <span class=\"hljs-keyword\">with</span> <span class=\"hljs-title\">an</span> \"<span class=\"hljs-title\">adapt</span>\" <span class=\"hljs-title\">method</span>.</span>\n<span class=\"hljs-type\">See</span> https:<span class=\"hljs-comment\">//kit.svelte.dev/docs#adapters</span>\n<span class=\"hljs-type\">Error</span>: config.kit.adapter should be an <span class=\"hljs-class\"><span class=\"hljs-keyword\">object</span> <span class=\"hljs-keyword\">with</span> <span class=\"hljs-title\">an</span> \"<span class=\"hljs-title\">adapt</span>\" <span class=\"hljs-title\">method</span>.</span>\n<span class=\"hljs-type\">See</span> https:<span class=\"hljs-comment\">//kit.svelte.dev/docs#adapters</span>\n</code></pre>\n<p>Before the Svelte team update the package, we could manually overwrite the <code>index.js</code> file in <code>node_modules/@sveltejs/adapter-static</code> with <a href=\"https://github.com/sveltejs/kit/tree/master/packages/adapter-static\">the latest version in the repo</a>.</p>\n<h2>Use gh-pages to deploy</h2>\n<p>After setting the static adapter, run:</p>\n<pre><code class=\"hljs language-bash\">npm run build\n</code></pre>\n<p>to build the app. The building result is stored in <code>build</code> folder. Then we could use the <code>gh-pages</code> library to deploy the app.</p>\n<pre><code class=\"hljs language-bash\">npm i -D gh-pages\n</code></pre>\n<p>And add a <code>deploy</code> command in <code>package.json</code> as</p>\n<pre><code class=\"hljs language-json\"><span class=\"hljs-string\">\"deploy\"</span>: <span class=\"hljs-string\">\"npm run build &#x26;&#x26; npx gh-pages -d build\"</span>\n</code></pre>\n<p>Before running deploy, we need to upload the app to Github as a new repository. Afterall, you could not have a Github Pages blog without a Github repo. If you have never uploaded any code to Github before, going through the <a href=\"https://docs.github.com/en/github/getting-started-with-github\">Getting started</a> pages in official Github doc is a good idea.</p>\n<p>After creating a corresponding repo (in my case <a href=\"https://github.com/svelteland/svelte-kit-blog-demo\">svelteland/svelte-kit-blog-demo</a>), we could run the deploy command:</p>\n<pre><code class=\"hljs language-bash\">npm run deploy\n</code></pre>\n<p>The <code>gh-pages</code> library will post the files in <code>build</code> folder to a new remote branch -- <code>gh-pages</code>, where Github Pages will look for static contents to host. The root url of the hosted app is <code>xxx.github.io/yyy</code> if your app is <code>xxx/yyy</code>. In my case, the address is <code>svelteland.github.io/svelte-kit-blog-demo</code>.</p>\n<p>Are we all set? Unfortunately, we are not... The hosted app does not work. All the CSS and JavaScripts are missing and  the routing is a mess. The reason for those is that the root for a Github Pages is, as we just mentioned, <code>xxx.github.io/yyy</code>, instead of <code>xxx.github.io</code>. Therefore we need to configure the relative directory, so that when looking for <code>a.css</code>, the app knows we actually need <code>xxx.github.io/yyy/a.css</code> but not <code>xxx.github.io/a.css</code>.</p>\n<p>Apart from that, lots of CSS and js files are in <code>build/_app</code> folder. However, the folder starts with underscore are ignored by Github Pages because of Jekyll. We need to disable Jekyll by updating the 2 command below in <code>package.json</code>:</p>\n<pre><code class=\"hljs language-json\"><span class=\"hljs-string\">\"build\"</span>: <span class=\"hljs-string\">\"rm -rf build &#x26;&#x26; svelte-kit build &#x26;&#x26; touch build/.nojekyll\"</span>,\n<span class=\"hljs-string\">\"deploy\"</span>: <span class=\"hljs-string\">\"npm run build &#x26;&#x26; npx gh-pages -d build -t true\"</span>\n</code></pre>\n<p>where the <code>-t true</code> flag in <code>deploy</code> is to make the <code>gh-pages</code> upload files starts with dot.</p>\n<h2>Set relative path</h2>\n<p>First we need to set the <code>paths.base</code> and <code>paths.assets</code> config in <code>svelte.config.cjs</code> to the relative path. In my case, it is:</p>\n<pre><code class=\"hljs language-json\"><span class=\"hljs-comment\">// Comment the paths if wants to run in dev mode.</span>\npaths: {\n  base: '/svelte-kit-blog-demo',\n  assets: '/svelte-kit-blog-demo'\n},\n</code></pre>\n<p>Then, we should update the directory or href in our component or javascript files with <code>paths.base</code>. For example, in the <code>Nav</code> component, we need to update the <code>href</code> in <code>a</code>:</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-comment\">&#x3C;!-- lib/Nav.svelte --></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">script</span>></span><span class=\"javascript\">\n  <span class=\"hljs-keyword\">import</span> { base } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'$app/paths'</span>;\n</span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">script</span>></span>\n\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">nav</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"{base}/\"</span>></span><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h3</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"home\"</span>></span>HOME<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h3</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">a</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"{base}/about\"</span>></span><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h3</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"about\"</span>></span>about<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h3</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">a</span>></span>\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">nav</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n</code></pre>\n<p>Or in <code>index.svelte</code>, we need to update the json to load:</p>\n<pre><code class=\"hljs language-js\">  <span class=\"hljs-keyword\">import</span> { base } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'$app/paths'</span>;\n\n  <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">load</span>(<span class=\"hljs-params\">{ fetch }</span>) </span>{\n    <span class=\"hljs-keyword\">const</span> posts = <span class=\"hljs-keyword\">await</span> fetch(<span class=\"hljs-string\">`<span class=\"hljs-subst\">${base}</span>/index.json`</span>)\n        .then(<span class=\"hljs-function\">(<span class=\"hljs-params\">r</span>) =></span> r.json());\n    <span class=\"hljs-keyword\">return</span> {\n      <span class=\"hljs-attr\">props</span>: { posts }\n    }\n  }\n</code></pre>\n<p>After configuring these paths, rerun <code>npm run deploy</code>, you could see your app running correctly!</p>\n<p>P.S. Don't forget to clean the browser cache after the new deploy.</p>"}