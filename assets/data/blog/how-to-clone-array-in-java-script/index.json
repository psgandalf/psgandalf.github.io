{"hash":"c2842e6edab0b7efd9f4e48c4d8715a346f6c6f2","data":{"post":{"id":"2bfca8e3db1ad54db663f8b43fa87e2a","title":"How to Clone Array in JavaScript","content":"<p>There are a few ways to clone an array in JavaScript,</p>\n<h3 id=\"objectassign\"><a href=\"#objectassign\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Object.assign</h3>\n<p><code>Object.assign</code> allows us to make a shallow copy of any kind of object including arrays.\nFor example:</p>\n<pre>const a = [1,2,3];\nconst b = Object.assign([], a); // [1,2,3]</pre>\n<h3 id=\"arrayslice\"><a href=\"#arrayslice\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Array.slice</h3>\n<p>The <code>Array.slice</code> function returns a copy of the original array.\nFor example:</p>\n<pre>const a = [1,2,3];\nconst b = a.slice(0); // [1,2,3]</pre>\n<h3 id=\"arrayfrom\"><a href=\"#arrayfrom\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Array.from</h3>\n<p>The <code>Array.slice</code> function returns a copy of the original array. It takes array like objects like <code>Set</code> and it also takes an array as an argument.</p>\n<pre>const a = [1,2,3];\nconst b = Array.from(a); // [1,2,3]</pre>\n<h3 id=\"spread-operator\"><a href=\"#spread-operator\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Spread Operator</h3>\n<p>The fastest way to copy an array, which is available with ES6 or later, is the spread operator.</p>\n<pre>const a = [1,2,3];\nconst b = [...a]; // [1,2,3]</pre>\n<h3 id=\"jsonparse-and-jsonstringify\"><a href=\"#jsonparse-and-jsonstringify\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>JSON.parse and JSON.stringify</h3>\n<p>This allows for deep copy of an array and only works if the objects in the array are plain objects. It can be used like this:</p>\n<pre>const a = [1,2,3];\nconst b = JSON.parse(JSON.stringify(a)); // [1,2,3]</pre>\n","date":"4 May 2019","timeToRead":1}},"context":{}}